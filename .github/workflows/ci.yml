name: scg-test-kit

on:
  workflow_dispatch:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version from scg script
        id: go-version
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f scg ]]; then
            echo "scg not found at repo root"; exit 1
          fi
          GO_VERSION=$(grep -Eo 'GO_VERSION="[^"]+"' scg | cut -d'"' -f2 || true)
          if [[ -z "${GO_VERSION:-}" ]]; then
            echo "GO_VERSION not found in scg"; exit 1
          fi
          echo "Using Go version from scg: ${GO_VERSION}"
          echo "version=${GO_VERSION}" >> "$GITHUB_OUTPUT"

  build:
    name: Build
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go (${{ needs.setup.outputs.go-version }})
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true
        env:
          GOTOOLCHAIN: local

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-

      - name: Build
        run: go build -v ./...

  test:
    name: Test (Go ${{ matrix.go-version }})
    needs: [setup, build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - ${{ needs.setup.outputs.go-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go (${{ matrix.go-version }})
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
        env:
          GOTOOLCHAIN: local

      - name: Restore build caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-
        continue-on-error: true

      - name: Run tests (exclude examples/)
        shell: bash
        run: |
          set -euo pipefail
          PKGS=$(go list ./... | grep -Ev '/examples($|/)' || true)
          if [[ -z "${PKGS}" ]]; then
            echo "No packages to test"
            exit 0
          fi
          go test -race -v -parallel 4 -covermode=atomic -coverprofile=coverage.txt ${PKGS}

      - name: Coverage summary
        if: always()
        run: go tool cover -func=coverage.txt | tail -n 1

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.txt

  lint:
    name: Lint
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go (${{ needs.setup.outputs.go-version }})
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true
        env:
          GOTOOLCHAIN: local

      # Reuse build cache from the build job
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-
        continue-on-error: true

      # Cache golangci-lint cache to speed up subsequent runs
      - name: Cache golangci-lint cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('.golangci.*','**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-
        continue-on-error: true

      - name: Install golangci-lint (built with current Go, v2)
        shell: bash
        run: |
          set -euo pipefail
          echo "Installing golangci-lint v2 via 'go install'â€¦"
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
        env:
          GOTOOLCHAIN: local

      - name: Run golangci-lint
        id: run-lint
        shell: bash
        run: |
          set +e
          golangci-lint run --timeout=5m --concurrency=4 | tee lint-report.txt
          status=${PIPESTATUS[0]}
          echo "status=$status" >> "$GITHUB_OUTPUT"
          exit $status
        env:
          GOTOOLCHAIN: local

      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint-report.txt
        continue-on-error: true

      - name: Add lint details to job summary
        if: always()
        shell: bash
        run: |
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Lint Report (first 200 lines)" >> "$GITHUB_STEP_SUMMARY"
          if [[ -s lint-report.txt ]]; then
            head -n 200 lint-report.txt >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No lint findings (empty report file)." >> "$GITHUB_STEP_SUMMARY"
          fi

  security:
    name: Security Check
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go (${{ needs.setup.outputs.go-version }})
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true
        env:
          GOTOOLCHAIN: local

      - name: Install security tools
        shell: bash
        run: |
          set -euo pipefail
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: govulncheck (skip examples/)
        shell: bash
        run: |
          set -euo pipefail
          PKGS=$(go list ./... | grep -Ev '/examples($|/)' || true)
          if [[ -n "${PKGS}" ]]; then
            govulncheck ${PKGS}
          fi

      - name: gosec (skip examples/ and VCS dirs)
        run: |
          gosec -quiet \
            -exclude-dir=.git \
            -exclude-dir=.github \
            -exclude-dir=examples \
            ./...

  summary:
    name: CI Summary
    needs: [setup, build, test, lint, security]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create summary
        shell: bash
        run: |
          set -euo pipefail
          echo "## CI Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "### Job Results" >> "$GITHUB_STEP_SUMMARY"
          echo "- Setup:     ${{ needs.setup.result }}"     >> "$GITHUB_STEP_SUMMARY"
          echo "- Build:     ${{ needs.build.result }}"     >> "$GITHUB_STEP_SUMMARY"
          echo "- Test:      ${{ needs.test.result }}"      >> "$GITHUB_STEP_SUMMARY"
          echo "- Lint:      ${{ needs.lint.result }}"      >> "$GITHUB_STEP_SUMMARY"
          echo "- Security:  ${{ needs.security.result }}"  >> "$GITHUB_STEP_SUMMARY"

          FAILED=false
          for r in "${{ needs.setup.result }}" "${{ needs.build.result }}" "${{ needs.test.result }}" "${{ needs.lint.result }}" "${{ needs.security.result }}"; do
            if [[ "$r" == "failure" || "$r" == "cancelled" ]]; then
              FAILED=true
            fi
          done

          if $FAILED; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo ":warning: One or more jobs failed or were cancelled. Please check the logs above for details." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo ":white_check_mark: All jobs completed successfully." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Attach coverage info (if available)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .
        continue-on-error: true

      - name: Attach lint report (if available)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: lint-report
          path: .
        continue-on-error: true

      - name: Add coverage details to summary
        if: always()
        shell: bash
        run: |
          if [[ -f coverage.txt ]]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "### Test Coverage" >> "$GITHUB_STEP_SUMMARY"
            echo "A coverage.txt artifact is available (downloaded)." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Add lint details to final summary
        if: always()
        shell: bash
        run: |
          if [[ -f lint-report.txt ]]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "### Lint Results (from artifact)" >> "$GITHUB_STEP_SUMMARY"
            head -n 200 lint-report.txt >> "$GITHUB_STEP_SUMMARY"
            if [[ $(wc -l < lint-report.txt) -gt 200 ]]; then
              echo "... (truncated)" >> "$GITHUB_STEP_SUMMARY"
            fi
          fi
